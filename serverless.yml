# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-s3-sync

service: owasp10

provider:
  name: aws
  runtime: python3.9
  stackName: ${self:service}-${self:provider.stage}
  profile: owasp-demo
  logRetentionInDays: 14
  region: eu-west-1
  memorySize: 128
  iamRoleStatements:
    - Effect: Allow
      Action:
       - dynamodb:Query
       - dynamodb:Scan
       - dynamodb:GetItem
       - dynamodb:PutItem
       - dynamodb:UpdateItem
       - dynamodb:DeleteItem
      Resource:
        - Fn::GetAtt:
          - rekoPhotosTable
          - Arn
        - Fn::GetAtt:
          - rekoTagsTable
          - Arn
        - Fn::GetAtt:
          - rekoPhotosTagsTable
          - Arn
        - Fn::Join:
          - ""
          - - Fn::GetAtt: [rekoPhotosTagsTable, Arn]
            - '/index/*'

    - Effect: Allow
      Action:
        - s3:ListBucket
        - s3:GetObject
        - s3:DeleteObject
      Resource:
         Fn::Join:
           - ""
           - - "arn:aws:s3:::"
             - ${self:service}-${self:provider.stage}/*

    - Effect: Allow
      Action:
        - rekognition:DetectLabels
        - rekognition:DetectFaces
        - rekognition:DetectModerationLabels
      Resource: "*"

  stage: demo

custom:
  s3Sync:
    - bucketName: ${self:custom.staticSiteName}
      localDir: static-site # required
      #acl: public-read # optional
      followSymlinks: true # optional
      defaultContentType: text/html # optional
      params: # optional
        - index.html:
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: 'public, max-age=31536000'
  staticSiteName: owasp10.boaz.cloud

functions:
  RunReko:
    handler: parse_photo.run_reko
  GetTags:
    handler: get_info.get_tags
    reservedConcurrency: 5
    events:
      - http:
          path: info/get_tags
          method: get

resources:
  Resources:
    rekoPhotosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-Photos
        AttributeDefinitions:
          - AttributeName: photo_id
            AttributeType: S
          - AttributeName: upload_date
            AttributeType: S
        KeySchema:
          - AttributeName: photo_id
            KeyType: HASH
          - AttributeName: upload_date
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    rekoTagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-Tags
        AttributeDefinitions:
          - AttributeName: tag
            AttributeType: S
        KeySchema:
          - AttributeName: tag
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    rekoPhotosTagsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${self:provider.stage}-PhotosTags
        AttributeDefinitions:
          - AttributeName: photo_id
            AttributeType: S
          - AttributeName: tag_id
            AttributeType: S
        KeySchema:
          - AttributeName: photo_id
            KeyType: HASH
          - AttributeName: tag_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 2
        GlobalSecondaryIndexes:
        - IndexName : IdOnly
          KeySchema :
          - AttributeName: photo_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput :
            ReadCapacityUnits: 5
            WriteCapacityUnits: 2
        - IndexName : TagOnly
          KeySchema :
          - AttributeName: tag_id
            KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput :
            ReadCapacityUnits: 5
            WriteCapacityUnits: 2

    StaticSiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.staticSiteName}
        AccessControl: Private

    CloudFrontOriginIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: 'origin identity'
        
    StaticBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: ${self:custom.staticSiteName}
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
              Action: 's3:GetObject'
              Resource: arn:aws:s3:::${self:custom.staticSiteName}/*

    CDN:
      Type: "AWS::CloudFront::Distribution"
      Properties:
        DistributionConfig:
          ViewerCertificate:
            AcmCertificateArn: !Sub arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/0e719c9f-4e21-4b90-b71f-68c2b42e158a
            SslSupportMethod: sni-only
          Enabled: true
          HttpVersion: http2
          Aliases:
            - ${self:custom.staticSiteName}
          DefaultRootObject: index.html
          Origins:
            - DomainName: {"Fn::Join": ["", [{Ref: StaticSiteBucket}, ".", "s3.eu-west-1.amazonaws.com"]]}
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
          DefaultCacheBehavior:
            ViewerProtocolPolicy: redirect-to-https
            TargetOriginId: S3Origin
            AllowedMethods:
              - GET
              - HEAD
            Compress: false
            DefaultTTL: 30
            MinTTL: 10
            MaxTTL: 30
            ForwardedValues:
              QueryString: false

    ImagesBucket:
      Type: AWS::S3::Bucket
      DependsOn:
        - EventLambdaPermissionS3Bucket
      Properties:
        AccessControl: Private
        BucketName: ${self:service}-${self:provider.stage}
        CorsConfiguration:
                CorsRules:
                  -
                    AllowedOrigins:
                      - '*'
                    AllowedHeaders:
                      - '*'
                    AllowedMethods:
                      - GET
                      - PUT
                      - POST
                      - DELETE
                      - HEAD
                    MaxAge: 3000
        NotificationConfiguration:
          LambdaConfigurations:
            - Event: 's3:ObjectCreated:*'
              Function:
                'Fn::GetAtt': [ RunRekoLambdaFunction, Arn ]

    EventLambdaPermissionS3Bucket:
      DependsOn:
        - RunRekoLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          'Fn::GetAtt': [ RunRekoLambdaFunction, Arn ]
        Action: 'lambda:InvokeFunction'
        Principal: 's3.amazonaws.com'
        SourceAccount: !Ref "AWS::AccountId"
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:s3:::"
              - ${self:service}-${self:provider.stage}

    #Cognito
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: RekoImageIdentityPool
        AllowUnauthenticatedIdentities: true

    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          unauthenticated:
            Fn::GetAtt: [CognitoUnAuthRole, Arn]

    # IAM role used for unauthenticated users
    CognitoUnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated
        Policies:
          - PolicyName: RekoImageCognitoUnAuthorizedPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'

                # Allow users to invoke our API
                - Effect: 'Allow'
                  Action:
                    - 's3:PutObject'
                    - 's3:ListBucket'
                    - 's3:GetObject'
                    - 's3:PutObjectAcl'
                  Resource: 'arn:aws:s3:::*'

                - Effect: 'Allow'
                  Action:
                    - 's3:ListBucket'
                    - 's3:GetObject'
                  Resource: 
                    'arn:aws:s3:::${self:service}-${self:provider.stage}'

                - Effect: 'Allow'
                  Action:
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:GetItem
                  Resource:
                    - Fn::GetAtt:
                      - rekoPhotosTable
                      - Arn
                    - Fn::GetAtt:
                      - rekoTagsTable
                      - Arn
                    - Fn::GetAtt:
                      - rekoPhotosTagsTable
                      - Arn
                    - Fn::Join:
                      - ""
                      - - Fn::GetAtt: [rekoPhotosTagsTable, Arn]
                        - '/index/*'

  Outputs:
    IdentityPoolId:
      Value:
        Ref: CognitoIdentityPool
    WebSiteCloudFrontDistributionOutput:
        Value:
          'Fn::GetAtt': [ CDN, DomainName ]
