{
  "service": {
    "service": "owasp10",
    "serviceObject": {
      "name": "owasp10"
    },
    "provider": {
      "name": "aws",
      "runtime": "python3.9",
      "stackName": "owasp10-demo",
      "profile": "owasp-demo",
      "logRetentionInDays": 14,
      "region": "eu-west-1",
      "memorySize": 128,
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "rekoPhotosTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "rekoTagsTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "rekoPhotosTagsTable",
                "Arn"
              ]
            },
            {
              "Fn::Join": [
                "",
                [
                  {
                    "Fn::GetAtt": [
                      "rekoPhotosTagsTable",
                      "Arn"
                    ]
                  },
                  "/index/*"
                ]
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket",
            "s3:GetObject",
            "s3:DeleteObject"
          ],
          "Resource": {
            "Fn::Join": [
              "",
              [
                "arn:aws:s3:::",
                "owasp10-demo/*"
              ]
            ]
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "rekognition:DetectLabels",
            "rekognition:DetectFaces",
            "rekognition:DetectModerationLabels"
          ],
          "Resource": "*"
        }
      ],
      "stage": "demo",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "RunRekoLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/owasp10-demo-RunReko",
              "RetentionInDays": 14
            }
          },
          "GetTagsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/owasp10-demo-GetTags",
              "RetentionInDays": 14
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "owasp10",
                        "demo",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/owasp10-demo*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/owasp10-demo*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "owasp10",
                    "demo",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "RunRekoLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/owasp10/demo/1683901632591-2023-05-12T14:27:12.591Z/owasp10.zip"
              },
              "Handler": "parse_photo.run_reko",
              "Runtime": "python3.9",
              "FunctionName": "owasp10-demo-RunReko",
              "MemorySize": 128,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "RunRekoLogGroup"
            ]
          },
          "GetTagsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/owasp10/demo/1683901632591-2023-05-12T14:27:12.591Z/owasp10.zip"
              },
              "Handler": "get_info.get_tags",
              "Runtime": "python3.9",
              "FunctionName": "owasp10-demo-GetTags",
              "MemorySize": 128,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTagsLogGroup"
            ]
          },
          "RunRekoLambdaVersionIx7jaPViZoSNKnDB1eUHtfMgrESb79YpOLwyo3tU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "RunRekoLambdaFunction"
              },
              "CodeSha256": "BGguG+5M1suj34fBDTQkmtKJWnI6WQ0BVLP/h6tCOnI="
            }
          },
          "GetTagsLambdaVersionYFN91ECRQ25XJovwxUV9NptuBZDWTIwAVgvCEBLL4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTagsLambdaFunction"
              },
              "CodeSha256": "BGguG+5M1suj34fBDTQkmtKJWnI6WQ0BVLP/h6tCOnI="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "demo-owasp10",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceInfo": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "info",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceInfoGettags": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceInfo"
              },
              "PathPart": "get_tags",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodInfoGettagsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceInfoGettags"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTagsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTagsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1683901631393": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "demo"
            },
            "DependsOn": [
              "ApiGatewayMethodInfoGettagsGet"
            ]
          },
          "GetTagsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTagsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "rekoPhotosTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "owasp10-demo-Photos",
              "AttributeDefinitions": [
                {
                  "AttributeName": "photo_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "upload_date",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "photo_id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "upload_date",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "rekoTagsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "owasp10-demo-Tags",
              "AttributeDefinitions": [
                {
                  "AttributeName": "tag",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "tag",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "rekoPhotosTagsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "owasp10-demo-PhotosTags",
              "AttributeDefinitions": [
                {
                  "AttributeName": "photo_id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "tag_id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "photo_id",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "tag_id",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 5,
                "WriteCapacityUnits": 2
              },
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "IdOnly",
                  "KeySchema": [
                    {
                      "AttributeName": "photo_id",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 2
                  }
                },
                {
                  "IndexName": "TagOnly",
                  "KeySchema": [
                    {
                      "AttributeName": "tag_id",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 2
                  }
                }
              ]
            }
          },
          "StaticSiteBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "owasp10.boaz.cloud",
              "AccessControl": "Private"
            }
          },
          "CloudFrontOriginIdentity": {
            "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
            "Properties": {
              "CloudFrontOriginAccessIdentityConfig": {
                "Comment": "origin identity"
              }
            }
          },
          "StaticBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": "owasp10.boaz.cloud",
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "AWS": {
                        "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}"
                      }
                    },
                    "Action": "s3:GetObject",
                    "Resource": "arn:aws:s3:::owasp10.boaz.cloud/*"
                  }
                ]
              }
            }
          },
          "CDN": {
            "Type": "AWS::CloudFront::Distribution",
            "Properties": {
              "DistributionConfig": {
                "ViewerCertificate": {
                  "AcmCertificateArn": {
                    "Fn::Sub": "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/0e719c9f-4e21-4b90-b71f-68c2b42e158a"
                  },
                  "SslSupportMethod": "sni-only"
                },
                "Enabled": true,
                "HttpVersion": "http2",
                "Aliases": [
                  "owasp10.boaz.cloud"
                ],
                "DefaultRootObject": "index.html",
                "Origins": [
                  {
                    "DomainName": {
                      "Fn::Join": [
                        "",
                        [
                          {
                            "Ref": "StaticSiteBucket"
                          },
                          ".",
                          "s3.eu-west-1.amazonaws.com"
                        ]
                      ]
                    },
                    "Id": "S3Origin",
                    "S3OriginConfig": {
                      "OriginAccessIdentity": {
                        "Fn::Sub": "origin-access-identity/cloudfront/${CloudFrontOriginIdentity}"
                      }
                    }
                  }
                ],
                "DefaultCacheBehavior": {
                  "ViewerProtocolPolicy": "redirect-to-https",
                  "TargetOriginId": "S3Origin",
                  "AllowedMethods": [
                    "GET",
                    "HEAD"
                  ],
                  "Compress": false,
                  "DefaultTTL": 30,
                  "MinTTL": 10,
                  "ForwardedValues": {
                    "QueryString": false
                  }
                }
              }
            }
          },
          "ImagesBucket": {
            "Type": "AWS::S3::Bucket",
            "DependsOn": [
              "EventLambdaPermissionS3Bucket"
            ],
            "Properties": {
              "AccessControl": "Private",
              "BucketName": "owasp10-demo",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedOrigins": [
                      "*"
                    ],
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE",
                      "HEAD"
                    ],
                    "MaxAge": 3000
                  }
                ]
              },
              "NotificationConfiguration": {
                "LambdaConfigurations": [
                  {
                    "Event": "s3:ObjectCreated:*",
                    "Function": {
                      "Fn::GetAtt": [
                        "RunRekoLambdaFunction",
                        "Arn"
                      ]
                    }
                  }
                ]
              }
            }
          },
          "EventLambdaPermissionS3Bucket": {
            "DependsOn": [
              "RunRekoLambdaFunction"
            ],
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "RunRekoLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "s3.amazonaws.com",
              "SourceAccount": {
                "Ref": "AWS::AccountId"
              },
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    "owasp10-demo"
                  ]
                ]
              }
            }
          },
          "CognitoIdentityPool": {
            "Type": "AWS::Cognito::IdentityPool",
            "Properties": {
              "IdentityPoolName": "RekoImageIdentityPool",
              "AllowUnauthenticatedIdentities": true
            }
          },
          "CognitoIdentityPoolRoles": {
            "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
            "Properties": {
              "IdentityPoolId": {
                "Ref": "CognitoIdentityPool"
              },
              "Roles": {
                "unauthenticated": {
                  "Fn::GetAtt": [
                    "CognitoUnAuthRole",
                    "Arn"
                  ]
                }
              }
            }
          },
          "CognitoUnAuthRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Federated": "cognito-identity.amazonaws.com"
                    },
                    "Action": [
                      "sts:AssumeRoleWithWebIdentity"
                    ],
                    "Condition": {
                      "StringEquals": {
                        "cognito-identity.amazonaws.com:aud": {
                          "Ref": "CognitoIdentityPool"
                        }
                      },
                      "ForAnyValue:StringLike": {
                        "cognito-identity.amazonaws.com:amr": "unauthenticated"
                      }
                    }
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "RekoImageCognitoUnAuthorizedPolicy",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "mobileanalytics:PutEvents",
                          "cognito-sync:*",
                          "cognito-identity:*"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:ListBucket",
                          "s3:GetObject",
                          "s3:PutObjectAcl"
                        ],
                        "Resource": "arn:aws:s3:::owasp10-demo/*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListBucket",
                          "s3:GetObject"
                        ],
                        "Resource": "arn:aws:s3:::owasp10-demo"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "rekoPhotosTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "rekoTagsTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "rekoPhotosTagsTable",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::Join": [
                              "",
                              [
                                {
                                  "Fn::GetAtt": [
                                    "rekoPhotosTagsTable",
                                    "Arn"
                                  ]
                                },
                                "/index/*"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-owasp10-demo-ServerlessDeploymentBucketName"
            }
          },
          "RunRekoLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "RunRekoLambdaVersionIx7jaPViZoSNKnDB1eUHtfMgrESb79YpOLwyo3tU"
            },
            "Export": {
              "Name": "sls-owasp10-demo-RunRekoLambdaFunctionQualifiedArn"
            }
          },
          "GetTagsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTagsLambdaVersionYFN91ECRQ25XJovwxUV9NptuBZDWTIwAVgvCEBLL4"
            },
            "Export": {
              "Name": "sls-owasp10-demo-GetTagsLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/demo"
                ]
              ]
            },
            "Export": {
              "Name": "sls-owasp10-demo-ServiceEndpoint"
            }
          },
          "IdentityPoolId": {
            "Value": {
              "Ref": "CognitoIdentityPool"
            }
          },
          "WebSiteCloudFrontDistributionOutput": {
            "Value": {
              "Fn::GetAtt": [
                "CDN",
                "DomainName"
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "s3Sync": [
        {
          "bucketName": "owasp10.boaz.cloud",
          "localDir": "static-site",
          "followSymlinks": true,
          "defaultContentType": "text/html",
          "params": [
            {
              "index.html": {
                "CacheControl": "no-cache"
              }
            },
            {
              "*.js": {
                "CacheControl": "public, max-age=31536000"
              }
            }
          ]
        }
      ],
      "staticSiteName": "owasp10.boaz.cloud"
    },
    "plugins": [
      "serverless-s3-sync"
    ],
    "pluginsData": {},
    "functions": {
      "RunReko": {
        "handler": "parse_photo.run_reko",
        "events": [],
        "name": "owasp10-demo-RunReko",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "RunRekoLambdaVersionIx7jaPViZoSNKnDB1eUHtfMgrESb79YpOLwyo3tU"
      },
      "GetTags": {
        "handler": "get_info.get_tags",
        "events": [
          {
            "http": {
              "path": "info/get_tags",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "owasp10-demo-GetTags",
        "package": {},
        "memory": 128,
        "timeout": 6,
        "runtime": "python3.9",
        "vpc": {},
        "versionLogicalId": "GetTagsLambdaVersionYFN91ECRQ25XJovwxUV9NptuBZDWTIwAVgvCEBLL4"
      }
    },
    "resources": {
      "Resources": {
        "rekoPhotosTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "owasp10-demo-Photos",
            "AttributeDefinitions": [
              {
                "AttributeName": "photo_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "upload_date",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "photo_id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "upload_date",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "rekoTagsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "owasp10-demo-Tags",
            "AttributeDefinitions": [
              {
                "AttributeName": "tag",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "tag",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST"
          }
        },
        "rekoPhotosTagsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "owasp10-demo-PhotosTags",
            "AttributeDefinitions": [
              {
                "AttributeName": "photo_id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "tag_id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "photo_id",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "tag_id",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 5,
              "WriteCapacityUnits": 2
            },
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "IdOnly",
                "KeySchema": [
                  {
                    "AttributeName": "photo_id",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 2
                }
              },
              {
                "IndexName": "TagOnly",
                "KeySchema": [
                  {
                    "AttributeName": "tag_id",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 5,
                  "WriteCapacityUnits": 2
                }
              }
            ]
          }
        },
        "StaticSiteBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "owasp10.boaz.cloud",
            "AccessControl": "Private"
          }
        },
        "CloudFrontOriginIdentity": {
          "Type": "AWS::CloudFront::CloudFrontOriginAccessIdentity",
          "Properties": {
            "CloudFrontOriginAccessIdentityConfig": {
              "Comment": "origin identity"
            }
          }
        },
        "StaticBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": "owasp10.boaz.cloud",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "AWS": {
                      "Fn::Sub": "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}"
                    }
                  },
                  "Action": "s3:GetObject",
                  "Resource": "arn:aws:s3:::owasp10.boaz.cloud/*"
                }
              ]
            }
          }
        },
        "CDN": {
          "Type": "AWS::CloudFront::Distribution",
          "Properties": {
            "DistributionConfig": {
              "ViewerCertificate": {
                "AcmCertificateArn": {
                  "Fn::Sub": "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/0e719c9f-4e21-4b90-b71f-68c2b42e158a"
                },
                "SslSupportMethod": "sni-only"
              },
              "Enabled": true,
              "HttpVersion": "http2",
              "Aliases": [
                "owasp10.boaz.cloud"
              ],
              "DefaultRootObject": "index.html",
              "Origins": [
                {
                  "DomainName": {
                    "Fn::Join": [
                      "",
                      [
                        {
                          "Ref": "StaticSiteBucket"
                        },
                        ".",
                        "s3.eu-west-1.amazonaws.com"
                      ]
                    ]
                  },
                  "Id": "S3Origin",
                  "S3OriginConfig": {
                    "OriginAccessIdentity": {
                      "Fn::Sub": "origin-access-identity/cloudfront/${CloudFrontOriginIdentity}"
                    }
                  }
                }
              ],
              "DefaultCacheBehavior": {
                "ViewerProtocolPolicy": "redirect-to-https",
                "TargetOriginId": "S3Origin",
                "AllowedMethods": [
                  "GET",
                  "HEAD"
                ],
                "Compress": false,
                "DefaultTTL": 30,
                "MinTTL": 10,
                "ForwardedValues": {
                  "QueryString": false
                }
              }
            }
          }
        },
        "ImagesBucket": {
          "Type": "AWS::S3::Bucket",
          "DependsOn": [
            "EventLambdaPermissionS3Bucket"
          ],
          "Properties": {
            "AccessControl": "Private",
            "BucketName": "owasp10-demo",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedOrigins": [
                    "*"
                  ],
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE",
                    "HEAD"
                  ],
                  "MaxAge": 3000
                }
              ]
            },
            "NotificationConfiguration": {
              "LambdaConfigurations": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Function": {
                    "Fn::GetAtt": [
                      "RunRekoLambdaFunction",
                      "Arn"
                    ]
                  }
                }
              ]
            }
          }
        },
        "EventLambdaPermissionS3Bucket": {
          "DependsOn": [
            "RunRekoLambdaFunction"
          ],
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "FunctionName": {
              "Fn::GetAtt": [
                "RunRekoLambdaFunction",
                "Arn"
              ]
            },
            "Action": "lambda:InvokeFunction",
            "Principal": "s3.amazonaws.com",
            "SourceAccount": {
              "Ref": "AWS::AccountId"
            },
            "SourceArn": {
              "Fn::Join": [
                "",
                [
                  "arn:aws:s3:::",
                  "owasp10-demo"
                ]
              ]
            }
          }
        },
        "CognitoIdentityPool": {
          "Type": "AWS::Cognito::IdentityPool",
          "Properties": {
            "IdentityPoolName": "RekoImageIdentityPool",
            "AllowUnauthenticatedIdentities": true
          }
        },
        "CognitoIdentityPoolRoles": {
          "Type": "AWS::Cognito::IdentityPoolRoleAttachment",
          "Properties": {
            "IdentityPoolId": {
              "Ref": "CognitoIdentityPool"
            },
            "Roles": {
              "unauthenticated": {
                "Fn::GetAtt": [
                  "CognitoUnAuthRole",
                  "Arn"
                ]
              }
            }
          }
        },
        "CognitoUnAuthRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Federated": "cognito-identity.amazonaws.com"
                  },
                  "Action": [
                    "sts:AssumeRoleWithWebIdentity"
                  ],
                  "Condition": {
                    "StringEquals": {
                      "cognito-identity.amazonaws.com:aud": {
                        "Ref": "CognitoIdentityPool"
                      }
                    },
                    "ForAnyValue:StringLike": {
                      "cognito-identity.amazonaws.com:amr": "unauthenticated"
                    }
                  }
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": "RekoImageCognitoUnAuthorizedPolicy",
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "mobileanalytics:PutEvents",
                        "cognito-sync:*",
                        "cognito-identity:*"
                      ],
                      "Resource": "*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:ListBucket",
                        "s3:GetObject",
                        "s3:PutObjectAcl"
                      ],
                      "Resource": "arn:aws:s3:::owasp10-demo/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:ListBucket",
                        "s3:GetObject"
                      ],
                      "Resource": "arn:aws:s3:::owasp10-demo"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "dynamodb:Query",
                        "dynamodb:Scan",
                        "dynamodb:GetItem"
                      ],
                      "Resource": [
                        {
                          "Fn::GetAtt": [
                            "rekoPhotosTable",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "rekoTagsTable",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::GetAtt": [
                            "rekoPhotosTagsTable",
                            "Arn"
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              {
                                "Fn::GetAtt": [
                                  "rekoPhotosTagsTable",
                                  "Arn"
                                ]
                              },
                              "/index/*"
                            ]
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {
        "IdentityPoolId": {
          "Value": {
            "Ref": "CognitoIdentityPool"
          }
        },
        "WebSiteCloudFrontDistributionOutput": {
          "Value": {
            "Fn::GetAtt": [
              "CDN",
              "DomainName"
            ]
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "service": "owasp10",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "/Users/boazz/Documents/Evangelism/projects/aws-owasp10-demo/.serverless/owasp10.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/owasp10/demo/1683901632591-2023-05-12T14:27:12.591Z",
    "artifact": "owasp10.zip"
  }
}